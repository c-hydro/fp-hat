import os
import datetime
import pandas as pd
import numpy as np

# data attuale
date_now=datetime.datetime.now()
# data anno/mese/giorno
DATE= date_now.year+'/'date_now.month+'/'date_now.day
# data anno/mes
DATE1= date_now.year+'/'date_now.month
# ora per osservato
HOUR= date_now.hour
# giorno oggi
DAY= date_now.day


# varibili per path
VAR1='realtime_ef-lami-i7'
VAR2='realtime_nwp-lami-i7'
VAR3='realtime_rf-lami-i7'
VAR4='realtime_nwp-ecmwf-0100'
VAR5='realtime_rf-ecmwf-0100'
VAR6='realtime_ws-db'

# percorsi lista
path_1='/hydro/archive/'+VAR1+'/'+DATE
path_2='/hydro/archive/'+VAR2+'/'+DATE
path_3='/hydro/archive/'+VAR3+'/'+DATE
path_4='/hydro/archive/'+VAR4+'/'+DATE
path_5='/hydro/archive/'+VAR5+'/'+DATE
path_6='/hydro/archive/'+VAR6+'/'+DATE+'/'+HOUR

# percorsi dati
path_1bis='/hydro/archive/'+VAR1+'/'+DATE1
path_2bis='/hydro/archive/'+VAR2+'/'+DATE1
path_3bis='/hydro/archive/'+VAR3+'/'+DATE1
path_4bis='/hydro/archive/'+VAR4+'/'+DATE1
path_5bis='/hydro/archive/'+VAR5+'/'+DATE1
path_6bis='/hydro/archive/'+VAR6+'/'+DATE

# tento la verifica dei dati
print (VAR1)
try:
    # vado nella cartella dei dati
    os.chdir('path_1')
    # listo i file presenti
    lista_corse = os.listdir()
    # verifica data ultimo file scritto
    # se il giorno corrisponde 
    if lista_corse(-1).date == DAY: 
        print('verificata presenza corsa')
        # vado nella cartella dei dati
        os.chdir('path_1/*/timeseries/section_q')
        # listo i file presetni
        lista_idrogrammi = os.listdir()
        # numero sezioni per pagina web
        sezioni_presenti_VAR1 = np.size(lista_idrogrammi)
        
        
        # se lista non vuota
        if sezioni_presenti_VAR1>0:
            print('verificata presenza idrogrammi')
            #scrivo variabile presenza dato
            dato_VAR1_presente=1 
            
            
            # vado nella cartella warning
            os.chdir('path_1/*/warnings/')
            # leggo anagrafica 
            isAnagrafica = open('warning.txt','r')  # non so il nome del file se sia così
            anagrafica = read.isAnagrafica
            # scrivo ora di fine del run per usarla in pagina web
            ora_fine_VAR1 = isAnagrafica.date
            
            #################################################################################################################
            # definisco gli indici relativi ai diversi giorni passato/oggi/domani/dopodomani
            #leggo da un idrogramma la data da cui partono le osservazioni
            data_inizio =                # dovrebbe essere scritta ll'interno del file
            # definisco l'indice corrispondente alla data attuale
            indice_ora_attuale =         # calcolata come differenze della data attuale rispetto data_inizio
            # definisco l'indice corrispondente alla data attuale
            indice_inizio_domani =       # calcolata come differenze tra la mezzanotte rispetto data_inizio
            # definisco l'indice corrispondente alla data attuale
            indice_inizio_dopodomani =   # calcolata come differenze tra la mezzanotte di domani rispetto data_inizio
            
            
            #################################################################################################################
            
            
            
            # per ogni idrogramma
            for indice_idrogrammi in range(0  np.size(lista_idrogrammi)):
                ############################################################
                # leggo serie ensemble
                dati_ensemble =             # come matrice di n_ensemble x serie
                # creo il massimo della serie ad ogni istante
                max_dati_ensemble = np.amax(dati_ensemble, axis=0)
                # leggo nome asta
                nome_asta = lista_idrogrammi.name(indice_idrogrammi)
                # leggo nome sezione
                nome_sezione = lista_idrogrammi.name(indice_idrogrammi)
                
                
                ############################################################
                # recupero soglie da anagrafica
                for indice in range (0 np.size(anagrafica)):
                    # confronto anagrafica col nome dell'idrogramam
                    if anagrafica.name(indice) == lista_idrogrammi.name(indice_idrogrammi)
                        # soglia gialle
                        soglia1 = 
                        # soglia rossa
                        soglia2 = 
                indice += 1
                         
            
                #############################################################
                # verifico serie rispetto le soglie
                verifica_soglia1 = max_dati_ensemble >= soglia1
                verifica_soglia2 = max_dati_ensemble >= soglia2
                               
                
                #############################################################
                # scrivo le sezioni che superano le soglie nelal giornata di oggi
                if np.sum(verifica_soglia2[indice_ora_attuale,indice_inizio_domani]) >=1:
                    VAR1_soglia2_oggi = append(nome_asta+'@'+nome_sezione)
                else:
                    if np.sum(verifica_soglia1[indice_ora_attuale,indice_inizio_domani]) >=1:
                        VAR1_soglia1_oggi = append(nome_asta+'@'+nome_sezione)
            
               # scrivo le sezioni che superano le soglie nelal giornata di domani
                if np.sum(verifica_soglia2[indice_inizio_domani,indice_inizio_dopodomani]) >=1:
                    VAR1_soglia2_domani = append(nome_asta+'@'+nome_sezione)
                else:
                    if np.sum(verifica_soglia1[indice_inizio_domani,indice_inizio_dopodomani]) >=1:
                        VAR1_soglia1_domani = append(nome_asta+'@'+nome_sezione)           
                
            
        else:
            print('assenza idrogrammi')
            #scrivo variabile presenza dato
            dato_VAR1_presente=2 
        
        
        
        
    
    # se la data non corrisponde
    else:
        print('assenza corsa odiera')
        #scrivo variabile presenza dato
        dato_VAR1_presente=0      
except:
    print('errore generico')
    #scrivo variabile presenza dato
    dato_VAR1_presente=3
    
print('fine '+VAR1)
    

# tento la verifica dei dati
print (VAR2)
try:
    # vado nella cartella dei dati
    os.chdir('path_1')
    # listo i file presenti
    lista_corse = os.listdir()
    # verifica data ultimo file scritto
    # se il giorno corrisponde 
    if lista_corse(-1).date == DAY:
        print('verificata presenza corsa')
        # vado nella cartella dei dati
        os.chdir('path_1/*/timeseries/section_q')
        # listo i file presetni
        lista_idrogrammi = os.listdir()
        # numero sezioni per pagina web
        sezioni_presenti_VAR2 = np.size(lista_idrogrammi)
        
        # se lista non vuota
        if sezioni_presenti_VAR2>0:
            print('verificata presenza idrogrammi')
            #scrivo variabile presenza dato
            dato_VAR2_presente=1 
            
            
            # vado nella cartella warning
            os.chdir('path_1/*/warnings/')
            # leggo anagrafica 
            isAnagrafica = open('warning.txt','r')  # non so il nome del file se sia così
            anagrafica = read.isAnagrafica
            # scrivo ora di fine del run per usarla in pagina web
            ora_fine_VAR1 = isAnagrafica.date
            
            #################################################################################################################
            # definisco gli indici relativi ai diversi giorni passato/oggi/domani/dopodomani
            #leggo da un idrogramma la data da cui partono le osservazioni
            data_inizio =                # dovrebbe essere scritta ll'interno del file
            # definisco l'indice corrispondente alla data attuale
            indice_ora_attuale =         # calcolata come differenze della data attuale rispetto data_inizio
            # definisco l'indice corrispondente alla data attuale
            indice_inizio_domani =       # calcolata come differenze tra la mezzanotte rispetto data_inizio
            # definisco l'indice corrispondente alla data attuale
            indice_inizio_dopodomani =   # calcolata come differenze tra la mezzanotte di domani rispetto data_inizio
            
            
            #################################################################################################################
            
            
            
            # per ogni idrogramma
            for indice_idrogrammi in range(0  np.size(lista_idrogrammi)):
                ############################################################
                # leggo serie ensemble
                dati_ensemble = 
                # creo il massimo della serie ad ogni istante
                max_dati_ensemble = np.amax(dati_ensemble, axis=0)
                # leggo nome asta
                nome_asta = lista_idrogrammi.name(indice_idrogrammi)
                # leggo nome sezione
                nome_sezione = lista_idrogrammi.name(indice_idrogrammi)
                
                
                ############################################################
                # recupero soglie da anagrafica
                for indice in range (0 np.size(anagrafica)):
                    # confronto anagrafica col nome dell'idrogramam
                    if anagrafica.name(indice) == lista_idrogrammi.name(indice_idrogrammi)
                        # soglia gialle
                        soglia1 = 
                        # soglia rossa
                        soglia2 = 
                indice += 1
                         
            
                #############################################################
                # verifico serie rispetto le soglie
                verifica_soglia1 = max_dati_ensemble >= soglia1
                verifica_soglia2 = max_dati_ensemble >= soglia2
                               
                
                #############################################################
                # scrivo le sezioni che superano le soglie nelal giornata di oggi
                if np.sum(verifica_soglia2[indice_ora_attuale,indice_inizio_domani]) >=1:
                    VAR2_soglia2_oggi = append(nome_asta+'@'+nome_sezione)
                else:
                    if np.sum(verifica_soglia1[indice_ora_attuale,indice_inizio_domani]) >=1:
                        VAR2_soglia1_oggi = append(nome_asta+'@'+nome_sezione)
            
               # scrivo le sezioni che superano le soglie nelal giornata di domani
                if np.sum(verifica_soglia2[indice_inizio_domani,indice_inizio_dopodomani]) >=1:
                    VAR2_soglia2_domani = append(nome_asta+'@'+nome_sezione)
                else:
                    if np.sum(verifica_soglia1[indice_inizio_domani,indice_inizio_dopodomani]) >=1:
                        VAR2_soglia1_domani = append(nome_asta+'@'+nome_sezione)           
                
            
        else:
            print('assenza idrogrammi')
            #scrivo variabile presenza dato
            dato_VAR2_presente=2 
        
        
        
        
    
    # se la data non corrisponde
    else:
        print('assenza corsa odiera')
        #scrivo variabile presenza dato
        dato_VAR2_presente=0      
except:
    print('errore generico')
    #scrivo variabile presenza dato
    dato_VAR2_presente=3
    
print('fine '+VAR2)
   

# tento la verifica dei dati
print (VAR3)
try:
    # vado nella cartella dei dati
    os.chdir('path_1')
    # listo i file presenti
    lista_corse = os.listdir()
    # verifica data ultimo file scritto
    # se il giorno corrisponde 
    if lista_corse(-1).date == DAY:
        print('verificata presenza corsa')
        # vado nella cartella dei dati
        os.chdir('path_1/*/timeseries/section_q')
        # listo i file presetni
        lista_idrogrammi = os.listdir()
        # numero sezioni per pagina web
        if sezioni_presenti_VAR3>0:
        
        # se lista non vuota
        if :                              ##### pd.isnull(lista_idrogrammi)
            print('verificata presenza idrogrammi')
            #scrivo variabile presenza dato
            dato_VAR3_presente=1 
            
            
            # vado nella cartella warning
            # leggo anagrafica 
            isAnagrafica = open('warning.txt','r')  # non so il nome del file se sia così
            anagrafica = read.isAnagrafica
            # scrivo ora di fine del run per usarla in pagina web
            ora_fine_VAR1 = isAnagrafica.date
            
            #################################################################################################################
            # definisco gli indici relativi ai diversi giorni passato/oggi/domani/dopodomani
            #leggo da un idrogramma la data da cui partono le osservazioni
            data_inizio =                # dovrebbe essere scritta ll'interno del file
            # definisco l'indice corrispondente alla data attuale
            indice_ora_attuale =         # calcolata come differenze della data attuale rispetto data_inizio
            # definisco l'indice corrispondente alla data attuale
            indice_inizio_domani =       # calcolata come differenze tra la mezzanotte rispetto data_inizio
            # definisco l'indice corrispondente alla data attuale
            indice_inizio_dopodomani =   # calcolata come differenze tra la mezzanotte di domani rispetto data_inizio
            
            
            #################################################################################################################
            
            
            
            # per ogni idrogramma
            for indice_idrogrammi in range(0  np.size(lista_idrogrammi)):
                ############################################################
                # leggo serie ensemble
                dati_ensemble = 
                # creo il massimo della serie ad ogni istante
                max_dati_ensemble = np.amax(dati_ensemble, axis=0)
                # leggo nome asta
                nome_asta = lista_idrogrammi.name(indice_idrogrammi)
                # leggo nome sezione
                nome_sezione = lista_idrogrammi.name(indice_idrogrammi)
                
                
                ############################################################
                # recupero soglie da anagrafica
                for indice in range (0 np.size(anagrafica)):
                    # confronto anagrafica col nome dell'idrogramam
                    if anagrafica.name(indice) == lista_idrogrammi.name(indice_idrogrammi)
                        # soglia gialle
                        soglia1 = 
                        # soglia rossa
                        soglia2 = 
                indice += 1
                         
            
                #############################################################
                # verifico serie rispetto le soglie
                verifica_soglia1 = max_dati_ensemble >= soglia1
                verifica_soglia2 = max_dati_ensemble >= soglia2
                               
                
                #############################################################
                # scrivo le sezioni che superano le soglie nelal giornata di oggi
                if np.sum(verifica_soglia2[indice_ora_attuale,indice_inizio_domani]) >=1:
                    VAR3_soglia2_oggi = append(nome_asta+'@'+nome_sezione)
                else:
                    if np.sum(verifica_soglia1[indice_ora_attuale,indice_inizio_domani]) >=1:
                        VAR3_soglia1_oggi = append(nome_asta+'@'+nome_sezione)
            
               # scrivo le sezioni che superano le soglie nelal giornata di domani
                if np.sum(verifica_soglia2[indice_inizio_domani,indice_inizio_dopodomani]) >=1:
                    VAR3_soglia2_domani = append(nome_asta+'@'+nome_sezione)
                else:
                    if np.sum(verifica_soglia1[indice_inizio_domani,indice_inizio_dopodomani]) >=1:
                        VAR3_soglia1_domani = append(nome_asta+'@'+nome_sezione)           
                
            
        else:
            print('assenza idrogrammi')
            #scrivo variabile presenza dato
            dato_VAR3_presente=2 
        
        
        
        
    
    # se la data non corrisponde
    else:
        print('assenza corsa odiera')
        #scrivo variabile presenza dato
        dato_VAR3_presente=0      
except:
    print('errore generico')
    #scrivo variabile presenza dato
    dato_VAR3_presente=3
    
print('fine '+VAR3)
    

# tento la verifica dei dati
print (VAR4)
try:
    # vado nella cartella dei dati
    os.chdir('path_1')
    # listo i file presenti
    lista_corse = os.listdir()
    # verifica data ultimo file scritto
    # se il giorno corrisponde 
    if lista_corse(-1).date == DAY:
        print('verificata presenza corsa')
        # vado nella cartella dei dati
        os.chdir('path_1/*/timeseries/section_q')
        # listo i file presetni
        lista_idrogrammi = os.listdir()
        # numero sezioni per pagina web
        sezioni_presenti_VAR4 = np.size(lista_idrogrammi)
        
        # se lista non vuota
        if sezioni_presenti_VAR4>0:
            print('verificata presenza idrogrammi')
            #scrivo variabile presenza dato
            dato_VAR4_presente=1 
            
            
            # vado nella cartella warning
            os.chdir('path_1/*/warnings/')
            # leggo anagrafica 
            isAnagrafica = open('warning.txt','r')  # non so il nome del file se sia così
            anagrafica = read.isAnagrafica
            # scrivo ora di fine del run per usarla in pagina web
            ora_fine_VAR1 = isAnagrafica.date
            
            #################################################################################################################
            # definisco gli indici relativi ai diversi giorni passato/oggi/domani/dopodomani
            #leggo da un idrogramma la data da cui partono le osservazioni
            data_inizio =                # dovrebbe essere scritta ll'interno del file
            # definisco l'indice corrispondente alla data attuale
            indice_ora_attuale =         # calcolata come differenze della data attuale rispetto data_inizio
            # definisco l'indice corrispondente alla data attuale
            indice_inizio_domani =       # calcolata come differenze tra la mezzanotte rispetto data_inizio
            # definisco l'indice corrispondente alla data attuale
            indice_inizio_dopodomani =   # calcolata come differenze tra la mezzanotte di domani rispetto data_inizio
            
            
            #################################################################################################################
            
            
            
            # per ogni idrogramma
            for indice_idrogrammi in range(0  np.size(lista_idrogrammi)):
                ############################################################
                # leggo serie ensemble
                dati_ensemble = 
                # creo il massimo della serie ad ogni istante
                max_dati_ensemble = np.amax(dati_ensemble, axis=0)
                # leggo nome asta
                nome_asta = lista_idrogrammi.name(indice_idrogrammi)
                # leggo nome sezione
                nome_sezione = lista_idrogrammi.name(indice_idrogrammi)
                
                
                ############################################################
                # recupero soglie da anagrafica
                for indice in range (0 np.size(anagrafica)):
                    # confronto anagrafica col nome dell'idrogramam
                    if anagrafica.name(indice) == lista_idrogrammi.name(indice_idrogrammi)
                        # soglia gialle
                        soglia1 = 
                        # soglia rossa
                        soglia2 = 
                indice += 1
                         
            
                #############################################################
                # verifico serie rispetto le soglie
                verifica_soglia1 = max_dati_ensemble >= soglia1
                verifica_soglia2 = max_dati_ensemble >= soglia2
                               
                
                #############################################################
                # scrivo le sezioni che superano le soglie nelal giornata di oggi
                if np.sum(verifica_soglia2[indice_ora_attuale,indice_inizio_domani]) >=1:
                    VAR4_soglia2_oggi = append(nome_asta+'@'+nome_sezione)
                else:
                    if np.sum(verifica_soglia1[indice_ora_attuale,indice_inizio_domani]) >=1:
                        VAR4_soglia1_oggi = append(nome_asta+'@'+nome_sezione)
            
               # scrivo le sezioni che superano le soglie nelal giornata di domani
                if np.sum(verifica_soglia2[indice_inizio_domani,indice_inizio_dopodomani]) >=1:
                    VAR4_soglia2_domani = append(nome_asta+'@'+nome_sezione)
                else:
                    if np.sum(verifica_soglia1[indice_inizio_domani,indice_inizio_dopodomani]) >=1:
                        VAR4_soglia1_domani = append(nome_asta+'@'+nome_sezione)           
                
            
        else:
            print('assenza idrogrammi')
            #scrivo variabile presenza dato
            dato_VAR4_presente=2 
        
        
        
        
    
    # se la data non corrisponde
    else:
        print('assenza corsa odiera')
        #scrivo variabile presenza dato
        dato_VAR4_presente=0      
except:
    print('errore generico')
    #scrivo variabile presenza dato
    dato_VAR4_presente=3
    
print('fine '+VAR4)
    

# tento la verifica dei dati
print (VAR5)
try:
    # vado nella cartella dei dati
    os.chdir('path_1')
    # listo i file presenti
    lista_corse = os.listdir()
    # verifica data ultimo file scritto
    # se il giorno corrisponde 
    if lista_corse(-1).date == DAY: 
        print('verificata presenza corsa')
        # vado nella cartella dei dati
        os.chdir('path_1/*/timeseries/section_q')
        # listo i file presetni
        lista_idrogrammi = os.listdir()
        # numero sezioni per pagina web
        sezioni_presenti_VAR5 = np.size(lista_idrogrammi)
        
        # se lista non vuota
        if sezioni_presenti_VAR5>0:
            print('verificata presenza idrogrammi')
            #scrivo variabile presenza dato
            dato_VAR5_presente=1 
            
            
            # vado nella cartella warning
            os.chdir('path_1/*/warnings/')
            # leggo anagrafica 
            isAnagrafica = open('warning.txt','r')  # non so il nome del file se sia così
            anagrafica = read.isAnagrafica
            # scrivo ora di fine del run per usarla in pagina web
            ora_fine_VAR1 = isAnagrafica.date
            
            #################################################################################################################
            # definisco gli indici relativi ai diversi giorni passato/oggi/domani/dopodomani
            #leggo da un idrogramma la data da cui partono le osservazioni
            data_inizio =                # dovrebbe essere scritta ll'interno del file
            # definisco l'indice corrispondente alla data attuale
            indice_ora_attuale =         # calcolata come differenze della data attuale rispetto data_inizio
            # definisco l'indice corrispondente alla data attuale
            indice_inizio_domani =       # calcolata come differenze tra la mezzanotte rispetto data_inizio
            # definisco l'indice corrispondente alla data attuale
            indice_inizio_dopodomani =   # calcolata come differenze tra la mezzanotte di domani rispetto data_inizio
            
            
            #################################################################################################################
            
            
            
            # per ogni idrogramma
            for indice_idrogrammi in range(0  np.size(lista_idrogrammi)):
                ############################################################
                # leggo serie ensemble
                dati_ensemble = 
                # creo il massimo della serie ad ogni istante
                max_dati_ensemble = np.amax(dati_ensemble, axis=0)
                # leggo nome asta
                nome_asta = lista_idrogrammi.name(indice_idrogrammi)
                # leggo nome sezione
                nome_sezione = lista_idrogrammi.name(indice_idrogrammi)
                
                
                ############################################################
                # recupero soglie da anagrafica
                for indice in range (0 np.size(anagrafica)):
                    # confronto anagrafica col nome dell'idrogramam
                    if anagrafica.name(indice) == lista_idrogrammi.name(indice_idrogrammi)
                        # soglia gialle
                        soglia1 = 
                        # soglia rossa
                        soglia2 = 
                indice += 1
                         
            
                #############################################################
                # verifico serie rispetto le soglie
                verifica_soglia1 = max_dati_ensemble >= soglia1
                verifica_soglia2 = max_dati_ensemble >= soglia2
                               
                
                #############################################################
                # scrivo le sezioni che superano le soglie nelal giornata di oggi
                if np.sum(verifica_soglia2[indice_ora_attuale,indice_inizio_domani]) >=1:
                    VAR5_soglia2_oggi = append(nome_asta+'@'+nome_sezione)
                else:
                    if np.sum(verifica_soglia1[indice_ora_attuale,indice_inizio_domani]) >=1:
                        VAR5_soglia1_oggi = append(nome_asta+'@'+nome_sezione)
            
               # scrivo le sezioni che superano le soglie nelal giornata di domani
                if np.sum(verifica_soglia2[indice_inizio_domani,indice_inizio_dopodomani]) >=1:
                    VAR5_soglia2_domani = append(nome_asta+'@'+nome_sezione)
                else:
                    if np.sum(verifica_soglia1[indice_inizio_domani,indice_inizio_dopodomani]) >=1:
                        VAR5_soglia1_domani = append(nome_asta+'@'+nome_sezione)           
                
            
        else:
            print('assenza idrogrammi')
            #scrivo variabile presenza dato
            dato_VAR5_presente=2 
        
        
        
        
    
    # se la data non corrisponde
    else:
        print('assenza corsa odiera')
        #scrivo variabile presenza dato
        dato_VAR5_presente=0      
except:
    print('errore generico')
    #scrivo variabile presenza dato
    dato_VAR5_presente=3
    
print('fine '+VAR5)
    

# tento la verifica dei dati
print (VAR6)
try:
    # vado nella cartella dei dati
    os.chdir('path_1')
    # listo i file presenti
    lista_corse = os.listdir()
    # verifica data ultimo file scritto
    # se il giorno corrisponde 
    if lista_corse(-1).date == DAY: 
        print('verificata presenza corsa')
        # vado nella cartella dei dati
        os.chdir('path_1/*/timeseries/section_q')
        # listo i file presetni
        lista_idrogrammi = os.listdir()
        # numero sezioni per pagina web
        sezioni_presenti_VAR6 = np.size(lista_idrogrammi)
        
        # se lista non vuota
        if sezioni_presenti_VAR6>0:
            print('verificata presenza idrogrammi')
            #scrivo variabile presenza dato
            dato_VAR6_presente=1 
            
            
            # vado nella cartella warning
            os.chdir('path_1/*/warnings/')
            # leggo anagrafica 
            isAnagrafica = open('warning.txt','r')  # non so il nome del file se sia così
            anagrafica = read.isAnagrafica
            # scrivo ora di fine del run per usarla in pagina web
            ora_fine_VAR1 = isAnagrafica.date
            
            #################################################################################################################
            # definisco gli indici relativi ai diversi giorni passato/oggi/domani/dopodomani
            #leggo da un idrogramma la data da cui partono le osservazioni
            data_inizio =                # dovrebbe essere scritta ll'interno del file
            # definisco l'indice corrispondente alla data attuale
            indice_ora_attuale =         # calcolata come differenze della data attuale rispetto data_inizio
            # definisco l'indice corrispondente alla data attuale
            indice_inizio_domani =       # calcolata come differenze tra la mezzanotte rispetto data_inizio
            # definisco l'indice corrispondente alla data attuale
            indice_inizio_dopodomani =   # calcolata come differenze tra la mezzanotte di domani rispetto data_inizio
            
            
            #################################################################################################################
            
            
            
            # per ogni idrogramma
            for indice_idrogrammi in range(0  np.size(lista_idrogrammi)):
                ############################################################
                # leggo serie ensemble
                dati_ensemble = 
                # creo il massimo della serie ad ogni istante
                max_dati_ensemble = np.amax(dati_ensemble, axis=0)
                # leggo nome asta
                nome_asta = lista_idrogrammi.name(indice_idrogrammi)
                # leggo nome sezione
                nome_sezione = lista_idrogrammi.name(indice_idrogrammi)
                
                
                ############################################################
                # recupero soglie da anagrafica
                for indice in range (0 np.size(anagrafica)):
                    # confronto anagrafica col nome dell'idrogramam
                    if anagrafica.name(indice) == lista_idrogrammi.name(indice_idrogrammi)
                        # soglia gialle
                        soglia1 = 
                        # soglia rossa
                        soglia2 = 
                indice += 1
                         
            
                #############################################################
                # verifico serie rispetto le soglie
                verifica_soglia1 = max_dati_ensemble >= soglia1
                verifica_soglia2 = max_dati_ensemble >= soglia2
                               
                
                #############################################################
                # scrivo le sezioni che superano le soglie nelal giornata di oggi
                if np.sum(verifica_soglia2[indice_ora_attuale,indice_inizio_domani]) >=1:
                    VAR6_soglia2_oggi = append(nome_asta+'@'+nome_sezione)
                else:
                    if np.sum(verifica_soglia1[indice_ora_attuale,indice_inizio_domani]) >=1:
                        VAR6_soglia1_oggi = append(nome_asta+'@'+nome_sezione)
            
               # scrivo le sezioni che superano le soglie nelal giornata di domani
                if np.sum(verifica_soglia2[indice_inizio_domani,indice_inizio_dopodomani]) >=1:
                    VAR6_soglia2_domani = append(nome_asta+'@'+nome_sezione)
                else:
                    if np.sum(verifica_soglia1[indice_inizio_domani,indice_inizio_dopodomani]) >=1:
                        VAR6_soglia1_domani = append(nome_asta+'@'+nome_sezione)           
                
            
        else:
            print('assenza idrogrammi')
            #scrivo variabile presenza dato
            dato_VAR6_presente=2 
        
        
        
        
    
    # se la data non corrisponde
    else:
        print('assenza corsa odiera')
        #scrivo variabile presenza dato
        dato_VAR6_presente=0      
except:
    print('errore generico')
    #scrivo variabile presenza dato
    dato_VAR6_presente=3
    
print('fine '+VAR6)
    

print('Pagina web')
    
    
    
FidFile = open('Marche_check.html','w')
FidFile.write('<html>')
FidFile.write('<style>')
FidFile.write('table, th, td {border: 1px solid black; padding:3px;}')
FidFile.write('.rossa {background-color: rgba(255,0,0,0.5);color: black;;font-size:20;}')
FidFile.write('.gialla {background-color: rgba(255,255,0,0.5);color: black;;font-size:20;}')
FidFile.write('.verde {background-color: rgba(0,255,0,0.5);color: black;;font-size:20;}')
FidFile.write('.azzurro {background-color: rgba(0,255,255,0.5);color: black;;font-size:20;}')
FidFile.write('.grigio {background-color: rgba(128,128,128,0.5);color: black;;font-size:20;}')
FidFile.write('.blu {background-color: rgba(0,0,255,0.5);color: black;font-size:30;}')
FidFile.write('.nero {background-color: rgba(0,0,0,0.9);}')
FidFile.write('.SectionWidth {width:200;}')
FidFile.write('.SectionWidth1 {width:50;}')
FidFile.write('.SectionWidth2 {width:10;}')
FidFile.write('.tbl tr:hover {background-color: lightgray;color: blue;}')
FidFile.write('</style>')

FidFile.write('<table><tr><td><font size=3>Aggiornamento del:</font></td><td><font size=5><b>'+date_now+' UTC/b></font></td></tr>')

FidFile.write('<table class="tbl">')
FidFile.write('<thead>')
FidFile.write('<td class="blu"><b>Run <br>Marche</b></td>')
FidFile.write('<td class="blu"><b>Stato</b></td>')
FidFile.write('<td class="blu"><b>Sezioni</b></td>')
FidFile.write('<td class="nero SectionWidth2"></td>')
FidFile.write('<td class="blu SectionWidth1"><b>OGGI <br>gialla</b></td>')
FidFile.write('<td class="blu SectionWidth"><b>OGGI <br>gialla</b></td>')
FidFile.write('<td class="blu SectionWidth1"><b>OGGI <br>rossa</b></td>')
FidFile.write('<td class="blu SectionWidth"><b>OGGI <br>rossa</b></td>')
FidFile.write('<td class="nero SectionWidth2"></td>')
FidFile.write('<td class="blu SectionWidth1"><b>DOMANI <br>gialla</b></td>')
FidFile.write('<td class="blu SectionWidth"><b>DOMANI <br>gialla</b></td>')
FidFile.write('<td class="blu SectionWidth1"><b>DOMANI <br>rossa</b></td>')
FidFile.write('<td class="blu SectionWidth"><b>DOMANI <br>rossa</b></td>')
FidFile.write('</thead>')
FidFile.write('<tbody>')

#############################################################
# VAR1
print('scrivo VAR1')
FidFile.write('<tr>')

if dato_VAR1_presente == 1:
    FidFile.write('<td class=verde><b>LAMI deterministico</b></td>')
    FidFile.write('<td class=verde>Finito ('+ora_fine_VAR1+' UTC)</td>')
    FidFile.write('<td>'+sezioni_presenti_VAR1+'</td>')
    FidFile.write('<td class=nero></td>')
    
    
    # oggi soglia gialla
    if np.size(VAR1_soglia1_oggi) > 0:
        FidFile.write('<td class=gialla>'+np.size(VAR1_soglia1_oggi)+'di'+sezioni_presenti_VAR1)
        fFidFile.write('<td class=gialla>'+VAR1_soglia1_oggi+'</td>')
    else:
        FidFile.write('<td>-</td>')
        FidFile.write('<td>-</td>')
    # oggi soglia rossa
    if np.size(VAR1_soglia2_oggi) > 0:
        FidFile.write('<td class=rossa>'+np.size(VAR1_soglia2_oggi)+'di'+sezioni_presenti_VAR1)
        fFidFile.write('<td class=rossa>'+VAR1_soglia2_oggi+'</td>')
    else:
        FidFile.write('<td>-</td>')
        FidFile.write('<td>-</td>')
    
    # domani soglia gialla
    FidFile.write('<td class=nero></td>')
    if np.size(VAR1_soglia1_domani) > 0:
        FidFile.write('<td class=gialla>'+np.size(VAR1_soglia1_domani)+'di'+sezioni_presenti_VAR1)
        fFidFile.write('<td class=gialla>'+VAR1_soglia1_domani+'</td>')
    else:
        FidFile.write('<td>-</td>')
        FidFile.write('<td>-</td>')
    # oggi soglia rossa
    if np.size(VAR1_soglia2_domani) > 0:
        FidFile.write('<td class=rossa>'+np.size(VAR1_soglia2_domani)+'di'+sezioni_presenti_VAR1)
        fFidFile.write('<td class=rossa>'+VAR1_soglia2_domani+'</td>')
    else:
        FidFile.write('<td>-</td>')
        FidFile.write('<td>-</td>')
 
    
elif  dato_VAR1_presente == 2:
    FidFile.write('<td class=azzurro><b>LAMI deterministico</b></td>')
    FidFile.write('<td class=azzurro>NO RAIN</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    
elif dato_VAR1_presente == 0:
    FidFile.write('<td class=rossa><b>LAMI deterministico</b></td>')
    FidFile.write('<td class=rossa>NO RUN</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
else:
    FidFile.write('<td class=grigio><b>LAMI deterministico</b></td>')
    FidFile.write('<td class=grigio>ERRORE</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
FidFile.write('</tr>')

print('VAR1:ok')   
    

#############################################################
# VAR2
print('scrivo VAR2')
FidFile.write('<tr>')

if dato_VAR2_presente == 1:
    FidFile.write('<td class=verde><b>LAMI deterministico</b></td>')
    FidFile.write('<td class=verde>Finito ('+ora_fine_VAR2+' UTC)</td>')
    FidFile.write('<td>'+sezioni_presenti_VAR2+'</td>')
    FidFile.write('<td class=nero></td>')
    
    
    # oggi soglia gialla
    if np.size(VAR2_soglia1_oggi) > 0:
        FidFile.write('<td class=gialla>'+np.size(VAR2_soglia1_oggi)+'di'+sezioni_presenti_VAR2)
        fFidFile.write('<td class=gialla>'+VAR2_soglia1_oggi+'</td>')
    else:
        FidFile.write('<td>-</td>')
        FidFile.write('<td>-</td>')
    # oggi soglia rossa
    if np.size(VAR2_soglia2_oggi) > 0:
        FidFile.write('<td class=rossa>'+np.size(VAR2_soglia2_oggi)+'di'+sezioni_presenti_VAR2)
        fFidFile.write('<td class=rossa>'+VAR2_soglia2_oggi+'</td>')
    else:
        FidFile.write('<td>-</td>')
        FidFile.write('<td>-</td>')
    
    # domani soglia gialla
    FidFile.write('<td class=nero></td>')
    if np.size(VAR2_soglia1_domani) > 0:
        FidFile.write('<td class=gialla>'+np.size(VAR2_soglia1_domani)+'di'+sezioni_presenti_VAR2)
        fFidFile.write('<td class=gialla>'+VAR2_soglia1_domani+'</td>')
    else:
        FidFile.write('<td>-</td>')
        FidFile.write('<td>-</td>')
    # oggi soglia rossa
    if np.size(VAR2_soglia2_domani) > 0:
        FidFile.write('<td class=rossa>'+np.size(VAR2_soglia2_domani)+'di'+sezioni_presenti_VAR2)
        fFidFile.write('<td class=rossa>'+VAR2_soglia2_domani+'</td>')
    else:
        FidFile.write('<td>-</td>')
        FidFile.write('<td>-</td>')
 
    
elif  dato_VAR2_presente == 2:
    FidFile.write('<td class=azzurro><b>LAMI deterministico</b></td>')
    FidFile.write('<td class=azzurro>NO RAIN</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    
elif dato_VAR2_presente == 0:
    FidFile.write('<td class=rossa><b>LAMI deterministico</b></td>')
    FidFile.write('<td class=rossa>NO RUN</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
else:
    FidFile.write('<td class=grigio><b>LAMI deterministico</b></td>')
    FidFile.write('<td class=grigio>ERRORE</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
FidFile.write('</tr>')

print('VAR2:ok')   



#############################################################
# VAR3
print('scrivo VAR3')
FidFile.write('<tr>')

if dato_VAR3_presente == 1:
    FidFile.write('<td class=verde><b>LAMI deterministico</b></td>')
    FidFile.write('<td class=verde>Finito ('+ora_fine_VAR3+' UTC)</td>')
    FidFile.write('<td>'+sezioni_presenti_VAR3+'</td>')
    FidFile.write('<td class=nero></td>')
    
    
    # oggi soglia gialla
    if np.size(VAR3_soglia1_oggi) > 0:
        FidFile.write('<td class=gialla>'+np.size(VAR3_soglia1_oggi)+'di'+sezioni_presenti_VAR3)
        fFidFile.write('<td class=gialla>'+VAR3_soglia1_oggi+'</td>')
    else:
        FidFile.write('<td>-</td>')
        FidFile.write('<td>-</td>')
    # oggi soglia rossa
    if np.size(VAR3_soglia2_oggi) > 0:
        FidFile.write('<td class=rossa>'+np.size(VAR3_soglia2_oggi)+'di'+sezioni_presenti_VAR3)
        fFidFile.write('<td class=rossa>'+VAR3_soglia2_oggi+'</td>')
    else:
        FidFile.write('<td>-</td>')
        FidFile.write('<td>-</td>')
    
    # domani soglia gialla
    FidFile.write('<td class=nero></td>')
    if np.size(VAR3_soglia1_domani) > 0:
        FidFile.write('<td class=gialla>'+np.size(VAR3_soglia1_domani)+'di'+sezioni_presenti_VAR3)
        fFidFile.write('<td class=gialla>'+VAR3_soglia1_domani+'</td>')
    else:
        FidFile.write('<td>-</td>')
        FidFile.write('<td>-</td>')
    # oggi soglia rossa
    if np.size(VAR3_soglia2_domani) > 0:
        FidFile.write('<td class=rossa>'+np.size(VAR3_soglia2_domani)+'di'+sezioni_presenti_VAR3)
        fFidFile.write('<td class=rossa>'+VAR3_soglia2_domani+'</td>')
    else:
        FidFile.write('<td>-</td>')
        FidFile.write('<td>-</td>')
 
    
elif  dato_VAR3_presente == 2:
    FidFile.write('<td class=azzurro><b>LAMI deterministico</b></td>')
    FidFile.write('<td class=azzurro>NO RAIN</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    
elif dato_VAR3_presente == 0:
    FidFile.write('<td class=rossa><b>LAMI deterministico</b></td>')
    FidFile.write('<td class=rossa>NO RUN</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
else:
    FidFile.write('<td class=grigio><b>LAMI deterministico</b></td>')
    FidFile.write('<td class=grigio>ERRORE</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
FidFile.write('</tr>')

print('VAR3:ok')   



#############################################################
# VAR4
print('scrivo VAR4')
FidFile.write('<tr>')

if dato_VAR4_presente == 1:
    FidFile.write('<td class=verde><b>LAMI deterministico</b></td>')
    FidFile.write('<td class=verde>Finito ('+ora_fine_VAR4+' UTC)</td>')
    FidFile.write('<td>'+sezioni_presenti_VAR4+'</td>')
    FidFile.write('<td class=nero></td>')
    
    
    # oggi soglia gialla
    if np.size(VAR4_soglia1_oggi) > 0:
        FidFile.write('<td class=gialla>'+np.size(VAR4_soglia1_oggi)+'di'+sezioni_presenti_VAR4)
        fFidFile.write('<td class=gialla>'+VAR4_soglia1_oggi+'</td>')
    else:
        FidFile.write('<td>-</td>')
        FidFile.write('<td>-</td>')
    # oggi soglia rossa
    if np.size(VAR4_soglia2_oggi) > 0:
        FidFile.write('<td class=rossa>'+np.size(VAR4_soglia2_oggi)+'di'+sezioni_presenti_VAR4)
        fFidFile.write('<td class=rossa>'+VAR4_soglia2_oggi+'</td>')
    else:
        FidFile.write('<td>-</td>')
        FidFile.write('<td>-</td>')
    
    # domani soglia gialla
    FidFile.write('<td class=nero></td>')
    if np.size(VAR4_soglia1_domani) > 0:
        FidFile.write('<td class=gialla>'+np.size(VAR4_soglia1_domani)+'di'+sezioni_presenti_VAR4)
        fFidFile.write('<td class=gialla>'+VAR4_soglia1_domani+'</td>')
    else:
        FidFile.write('<td>-</td>')
        FidFile.write('<td>-</td>')
    # oggi soglia rossa
    if np.size(VAR4_soglia2_domani) > 0:
        FidFile.write('<td class=rossa>'+np.size(VAR4_soglia2_domani)+'di'+sezioni_presenti_VAR4)
        fFidFile.write('<td class=rossa>'+VAR4_soglia2_domani+'</td>')
    else:
        FidFile.write('<td>-</td>')
        FidFile.write('<td>-</td>')
 
    
elif  dato_VAR4_presente == 2:
    FidFile.write('<td class=azzurro><b>LAMI deterministico</b></td>')
    FidFile.write('<td class=azzurro>NO RAIN</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    
elif dato_VAR4_presente == 0:
    FidFile.write('<td class=rossa><b>LAMI deterministico</b></td>')
    FidFile.write('<td class=rossa>NO RUN</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
else:
    FidFile.write('<td class=grigio><b>LAMI deterministico</b></td>')
    FidFile.write('<td class=grigio>ERRORE</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
FidFile.write('</tr>')

print('VAR4:ok')   



#############################################################
# VAR5
print('scrivo VAR5')
FidFile.write('<tr>')

if dato_VAR5_presente == 1:
    FidFile.write('<td class=verde><b>LAMI deterministico</b></td>')
    FidFile.write('<td class=verde>Finito ('+ora_fine_VAR5+' UTC)</td>')
    FidFile.write('<td>'+sezioni_presenti_VAR5+'</td>')
    FidFile.write('<td class=nero></td>')
    
    
    # oggi soglia gialla
    if np.size(VAR5_soglia1_oggi) > 0:
        FidFile.write('<td class=gialla>'+np.size(VAR5_soglia1_oggi)+'di'+sezioni_presenti_VAR5)
        fFidFile.write('<td class=gialla>'+VAR5_soglia1_oggi+'</td>')
    else:
        FidFile.write('<td>-</td>')
        FidFile.write('<td>-</td>')
    # oggi soglia rossa
    if np.size(VAR5_soglia2_oggi) > 0:
        FidFile.write('<td class=rossa>'+np.size(VAR5_soglia2_oggi)+'di'+sezioni_presenti_VAR5)
        fFidFile.write('<td class=rossa>'+VAR5_soglia2_oggi+'</td>')
    else:
        FidFile.write('<td>-</td>')
        FidFile.write('<td>-</td>')
    
    # domani soglia gialla
    FidFile.write('<td class=nero></td>')
    if np.size(VAR5_soglia1_domani) > 0:
        FidFile.write('<td class=gialla>'+np.size(VAR5_soglia1_domani)+'di'+sezioni_presenti_VAR5)
        fFidFile.write('<td class=gialla>'+VAR5_soglia1_domani+'</td>')
    else:
        FidFile.write('<td>-</td>')
        FidFile.write('<td>-</td>')
    # oggi soglia rossa
    if np.size(VAR5_soglia2_domani) > 0:
        FidFile.write('<td class=rossa>'+np.size(VAR5_soglia2_domani)+'di'+sezioni_presenti_VAR5)
        fFidFile.write('<td class=rossa>'+VAR5_soglia2_domani+'</td>')
    else:
        FidFile.write('<td>-</td>')
        FidFile.write('<td>-</td>')
 
    
elif  dato_VAR5_presente == 2:
    FidFile.write('<td class=azzurro><b>LAMI deterministico</b></td>')
    FidFile.write('<td class=azzurro>NO RAIN</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    
elif dato_VAR5_presente == 0:
    FidFile.write('<td class=rossa><b>LAMI deterministico</b></td>')
    FidFile.write('<td class=rossa>NO RUN</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
else:
    FidFile.write('<td class=grigio><b>LAMI deterministico</b></td>')
    FidFile.write('<td class=grigio>ERRORE</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
FidFile.write('</tr>')

print('VAR5:ok')   



#############################################################
# VAR6
print('scrivo VAR6')
FidFile.write('<tr>')

if dato_VAR6_presente == 1:
    FidFile.write('<td class=verde><b>LAMI deterministico</b></td>')
    FidFile.write('<td class=verde>Finito ('+ora_fine_VAR6+' UTC)</td>')
    FidFile.write('<td>'+sezioni_presenti_VAR6+'</td>')
    FidFile.write('<td class=nero></td>')
    
    
    # oggi soglia gialla
    if np.size(VAR6_soglia1_oggi) > 0:
        FidFile.write('<td class=gialla>'+np.size(VAR6_soglia1_oggi)+'di'+sezioni_presenti_VAR6)
        fFidFile.write('<td class=gialla>'+VAR6_soglia1_oggi+'</td>')
    else:
        FidFile.write('<td>-</td>')
        FidFile.write('<td>-</td>')
    # oggi soglia rossa
    if np.size(VAR6_soglia2_oggi) > 0:
        FidFile.write('<td class=rossa>'+np.size(VAR6_soglia2_oggi)+'di'+sezioni_presenti_VAR6)
        fFidFile.write('<td class=rossa>'+VAR6_soglia2_oggi+'</td>')
    else:
        FidFile.write('<td>-</td>')
        FidFile.write('<td>-</td>')
    
    # domani soglia gialla
    FidFile.write('<td class=nero></td>')
    if np.size(VAR6_soglia1_domani) > 0:
        FidFile.write('<td class=gialla>'+np.size(VAR6_soglia1_domani)+'di'+sezioni_presenti_VAR6)
        fFidFile.write('<td class=gialla>'+VAR6_soglia1_domani+'</td>')
    else:
        FidFile.write('<td>-</td>')
        FidFile.write('<td>-</td>')
    # oggi soglia rossa
    if np.size(VAR6_soglia2_domani) > 0:
        FidFile.write('<td class=rossa>'+np.size(VAR6_soglia2_domani)+'di'+sezioni_presenti_VAR6)
        fFidFile.write('<td class=rossa>'+VAR6_soglia2_domani+'</td>')
    else:
        FidFile.write('<td>-</td>')
        FidFile.write('<td>-</td>')
 
    
elif  dato_VAR6_presente == 2:
    FidFile.write('<td class=azzurro><b>LAMI deterministico</b></td>')
    FidFile.write('<td class=azzurro>NO RAIN</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    
elif dato_VAR6_presente == 0:
    FidFile.write('<td class=rossa><b>LAMI deterministico</b></td>')
    FidFile.write('<td class=rossa>NO RUN</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
else:
    FidFile.write('<td class=grigio><b>LAMI deterministico</b></td>')
    FidFile.write('<td class=grigio>ERRORE</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td class=nero></td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
    FidFile.write('<td>-</td>')
FidFile.write('</tr>')

print('VAR6:ok')   



FidFile.write('</tbody>')
FidFile.write('</html>')
print('pagina web:ok')  













